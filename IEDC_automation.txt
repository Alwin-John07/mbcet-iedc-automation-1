To create a circuit for the code you provided, you'll need an ESP8266 development board (e.g., NodeMCU), three relays, and some basic electronic components. Here's a step-by-step guide to create the circuit:

**Components needed:**
1. ESP8266 development board (e.g., NodeMCU)
2. Three relays (with suitable voltage and current rating for your application)
3. Jumper wires
4. Power source (e.g., USB power adapter)
5. Optional: Pushbuttons or switches for manual control

**Circuit Connections:**

1. **Connect the ESP8266 to Wi-Fi:**
   - Connect the ESP8266 board to your computer using a USB cable for initial setup.
   - Modify the `WIFI_SSID` and `WIFI_PASS` constants with your Wi-Fi credentials.

2. **Relay Connections:**
   - Connect each relay module as follows:
     - Relay 1:
       - Connect one end of the relay coil to D1 (GPIO pin) on the ESP8266.
       - Connect the other end of the relay coil to the ground (GND) on the ESP8266.
       - Connect one end of the relay's common (COM) terminal to the positive terminal of your device/appliance.
       - Connect the other end of your device/appliance to the power supply's positive terminal.
       - Connect the power supply's negative terminal to the ground (GND) on the ESP8266.
       - Connect one of the relay's NO (Normally Open) terminals to the negative terminal of your device/appliance.
     - Relay 2: Repeat the above connections, but use D2 (GPIO pin) for control.
     - Relay 3: Repeat the above connections, but use D3 (GPIO pin) for control.

3. **Power Supply:**
   - Connect the power supply's positive terminal to the positive terminal of your device/appliance (common for all three relays).
   - Connect the power supply's negative terminal to the ground (GND) on the ESP8266 (common for all three relays).

4. **Optional Manual Control (Pushbuttons/switches):**
   - If you want to add manual control buttons or switches:
     - Connect one terminal of each pushbutton/switch to a GPIO pin (e.g., D4, D5, D6) on the ESP8266.
     - Connect the other terminal of each pushbutton/switch to ground (GND) on the ESP8266.
     - Modify the code to read the state of these pins and toggle the corresponding relay.

5. **Connect the ESP8266 to your computer:**
   - Power the ESP8266 through a USB power source and connect it to your computer via USB for programming.

6. **Upload the Code:**
   - Upload the modified code you provided to the ESP8266 using the Arduino IDE or another compatible development environment.

7. **Monitor Serial Output:**
   - Open the serial monitor to monitor the ESP8266's serial output and check if it connects to Wi-Fi successfully.

8. **Test the Circuit:**
   - After uploading the code and ensuring that your ESP8266 is connected to Wi-Fi, you should be able to control the relays using the SinricPro app or API. You can also use the optional manual control buttons/switches if you added them.

Make sure to follow proper safety precautions when working with electrical circuits, especially when connecting to mains voltage. Ensure that your relays and power supply are rated appropriately for your application, and consider using a protective enclosure for your circuit for safety reasons.

should we need a transistor in between the node mcu pin and relay as i am using 3, 5 volt relays or maybe a relay array

If you are using 5-volt relays with an ESP8266 (NodeMCU), it's generally a good practice to use transistors to control the relays. This is because the GPIO pins of the ESP8266 may not be able to provide enough current to directly drive the relays, and it helps protect the GPIO pins.

Here's how you can connect a transistor between the ESP8266 GPIO pin and the relay:

**Components needed (in addition to those mentioned earlier):**
1. NPN transistors (e.g., 2N3904)
2. Resistors (e.g., 1k立 and 10k立)
3. Diodes (e.g., 1N4001 or 1N4148)

**Circuit Connections:**

1. **Connect the Transistors:**
   - For each relay, connect an NPN transistor as follows:
     - Connect the collector (C) of the transistor to the positive terminal of the relay coil.
     - Connect the emitter (E) of the transistor to the ground (GND) of the ESP8266.
     - Connect the base (B) of the transistor through a 1k立 resistor to the GPIO pin of the ESP8266 that you want to use for relay control.
     - Connect a 10k立 resistor between the base (B) of the transistor and the emitter (E).
     - Connect a diode (e.g., 1N4001 or 1N4148) in parallel with the relay coil, with the cathode (striped end) connected to the positive terminal of the relay coil and the anode connected to the collector (C) of the transistor. This diode is used to protect the transistor from voltage spikes when the relay coil is de-energized.

2. **Connect the Relay Contacts:**
   - Connect the relay contacts to your device or load as mentioned earlier.

3. **Power Supply:**
   - Connect the power supply as mentioned earlier.

4. **Optional Manual Control (Pushbuttons/switches):**
   - If you added manual control buttons or switches, connect them as mentioned earlier.

With this setup, the transistors act as switches controlled by the ESP8266 GPIO pins. When the GPIO pin goes HIGH, it turns on the transistor, which in turn energizes the relay coil, activating the relay contacts. When the GPIO pin goes LOW, it turns off the transistor, de-energizing the relay coil and deactivating the relay contacts.

Using transistors in this way ensures that the ESP8266's GPIO pins are not overloaded and provides better control over the relays. It's a safer and more reliable way to interface with the relays, especially when dealing with higher current or voltage loads.